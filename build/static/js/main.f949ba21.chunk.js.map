{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","inputVal","target","value","delTodo","i","todo","state","filter","idx","handleSubmit","e","preventDefault","_this$state","includes","concat","toConsumableArray","_this2","react_default","a","createElement","className","length","map","key","onClick","bind","onSubmit","type","onChange","placeholder","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f949ba21.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props ){\n    super(props);\n    this.state = {\n      inputVal : '',\n      todo : []\n    };\n  }\n  handleChange = (event)=>{\n    this.setState({inputVal: event.target.value});  \n  }\n\n  delTodo = (i)=>{\n\t  this.setState({\n\t\t  todo: this.state.todo.filter((todo, idx)=> idx !== i)\n\t  })\n  }\n  \n  handleSubmit = (e)=>{\n\t  e.preventDefault();\n\t  let {inputVal, todo} = this.state;\n    if(inputVal && !todo.includes(inputVal) ){\n\t\tthis.setState({\n\t\t  todo:[...this.state.todo, this.state.inputVal],\n\t\t  inputVal: ''\n\t\t});\n\t}\n\telse{\n\t\tthis.setState({\n\t\t\tinputVal: ''\n\t\t})\n\t}\n  }\n  \n  render() {\n    let {todo} = this.state;\n    \n    return (\n      <div className=\"main\">\n\t\t  <h1 className='main-heading'>My ToDo</h1>\n        <div className='todo'>\n          <h1>Have fun and Complete below tasks </h1>\n          {todo.length > 0 ?  <ul className='list-unstyled'>\n            {todo.map((todo,i)=><li key={i}>{todo} <span className='del-btn' onClick={this.delTodo.bind(this, i)}>x</span></li>) }\n          </ul> : <p className='p'>All Done. Take a break</p>}\n        </div> \n        <form onSubmit={this.handleSubmit} className='form'>\n          <input  type='text' value={this.state.inputVal} onChange={this.handleChange} placeholder='what are you planning to do'/>\n          <button type='submit' className='btn-submit'> Add</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App ;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}